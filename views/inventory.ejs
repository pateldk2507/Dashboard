<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Count Sheet</title>
    <link rel="icon" type="image/x-icon" href="http://haloitboard.corp.teleco.ca/favicon.ico">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>


    <style>
        body {
            padding: 20px;
            font-family: 'Courier New', Courier, monospace;
            color: black;
            background-color: #f0f0f0;
        }

        .hidden {
            visibility: hidden;
            display: none;
        }

        .tdDiff{
            display: none;
        }

        @media print {

            
            .no-print {
                display: none;
            }
        }
       
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
             margin: 0;
        }

        .flash-green {
            background-color: green;
            color: black;
            animation: flash 2s forwards;
        }

        .flash-red {
            background-color: red;
            color: black;
            animation: flash 2s forwards;
        }

        @keyframes flash {
            0% { opacity: 1; }
            100% { opacity: 0.5; }
        }
    </style>

</head>
<body>
  
    
    
    <div class="row ">
        <div class="col-5">
            <h5><b>Count Sheet <span id="sLocation"></span></b></h5>
        </div>
        <div class="col no-print" style="text-align: right;">
            <select id="location" class="btn btn-outline-secondary" onchange="getSelectedOption(this)" style="margin-bottom: 8px; padding: 8px;">
                <option value="-0" disabled selected>Select Location</option>
                <option value="0">All Location</option>
                <option value="1101">WH1</option>
                <option value="1143">Pulled</option>
                <option value="955">Truck Esko</option>
                <option value="956">Truck Gerry</option>
                <option value="957">Truck David D</option>
                <option value="958">Truck Lawrance</option>
                <option value="959">Truck Chris OG</option>
                <option value="1099">Truck Troy</option>
                <option value="1100">Truck Geoff</option>
            </select>

            <button type="button" id="btnModal" class="btn btn-primary" style="display: none;" data-toggle="modal" data-target="#staticBackdrop">    
            </button>
         
            <label href="#" class="btn btn-outline-secondary"  onclick="downloadVariance()"><i class="fa-solid fa-print"></i> Print</label>
            <label class="btn btn-outline-danger" id="btnHalo" style="display: none;">Post Data to HALO</label>
            <label href="#" class="btn btn-outline-secondary"  onclick="clearCount()"> <i class="fa-solid fa-trash"></i> Clear Count</label>
            
            <label href="#" class="btn btn-outline-secondary"  onclick="downloadCSV()"><i class="fa-solid fa-file-arrow-down"></i> Get CSV</label>
            <label href="#" class="btn btn-outline-secondary"  for="csvFileInput"> <i class="fa-solid fa-file-arrow-up"></i> Upload CSV </label>
            <label href="#" class="btn btn-outline-secondary"  onclick="downloadHaloJson()"><i class="fa-solid fa-file-code"></i> Get JSON</label>
            <input type="file" id="csvFileInput" style="display: none;" accept=".csv" />

            
        </div>
    </div>
 


    <table style="width: 100%;border: 0px dotted rgb(155, 155, 155); text-align: left; padding: 5px;" id="data-table">
        <thead style="border-bottom: 1px dotted rgb(155, 155, 155); font-size: large;">
            <th class="no-print" style="width: 10%;">Item ID</th>
            <th style="width: 45%; ">Item Description</th>
            <th>SKU</th>
            <th >On Hand</th>
            <th>Count</th>
            <th style="text-align: right;" class="hidden" id="diff">QTY Diff</th>
            <th style="text-align: right;" class="hidden" id="cost">Cost Vari</th>
        </thead>
        <tbody>
            
            <%
                function cleanData(str){
                    if(str.includes(',')){
                        return str.replace(/,/g, '-');
                    }
                    return str;
                }
            %>
            
            <% data.forEach(function(item){ %>
                <tr class="itemRow" style="border-bottom: 1px dotted rgb(155, 155, 155);" data-location-id=<%= item.LocationID %> > 
                    <td class="no-print"><%= item.ItemID%></td>
                    <td style="text-align: left;"><%= cleanData(item.ItemDesc) %> - <%= item.Location %> </td>
                    <td style="text-align: left;"><%= cleanData(item.SKU) %></td>
                    <td  id=<%='onhand-'+item.ItemID+'-'+item.LocationID %>><%= item.OnHand%></td>
                    <td><input type="number" id=<%='input-'+item.ItemID+'-'+item.LocationID %> style="width: 50px;" min="0" required/></td>
                    <td style="text-align: right;"  id=<%='diff-'+item.ItemID+'-'+item.LocationID %>></td>
                    <td style="text-align: right;"  data-cost = <%= item.Cost %> id=<%='cost-'+item.ItemID+'-'+item.LocationID %>></td>
                </tr>
            <% }); %>

        </tbody>

      
    </table>
    
    <center> ••••• <span>Total Record:  <span id="rowCount">0</span>  <span id="reportData"></span> •••••</span></center>
       
      
    <div class="modal fade" id="staticBackdrop" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="staticBackdropLabel">File Verification</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <p>Uploaded File: <span id="ufileName"></span></p>
              <p>Selected Location: <span id="seledtedLocation"></span> </p>

              <b id="warningText"></b>
              
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

    <script>
         const locationSelect = document.getElementById('location');
            const rows = document.querySelectorAll('.itemRow');

        const rowCountLabel = document.getElementById('rowCount');

        var totalMissingItems =0, totalEstLost = 0;
        var jsonData=[];

        // Function to update the count of visible rows
        function updateRowCount() {
            const visibleRows = Array.from(rows).filter(row => !row.classList.contains('hidden'));
            rowCountLabel.textContent = visibleRows.length; // Update the row count display
        }

        // Function to filter rows based on selected location
        function filterRows() {
            
            totalMissingItems=0;
            totalEstLost=0;

            document.getElementById('reportData').innerText='';
            
            const selectedLocation = locationSelect.value;

            rows.forEach(row => {
                if (selectedLocation === "" || selectedLocation === "0" || row.dataset.locationId === selectedLocation) {
                    row.classList.remove('hidden'); // Show the row
                } else {
                    row.classList.add('hidden'); // Hide the row
                }
            });
            updateRowCount();
        }

        var fileName='';
        function getSelectedOption(location){
            filterRows();
            document.title = 'Count Sheet - ' + location.options[location.selectedIndex].text;
            document.getElementById('sLocation').innerText = ' - ' + location.options[location.selectedIndex].text;
            fileName =  location.options[location.selectedIndex].text;
            localStorage.setItem('location',location.options[location.selectedIndex].text);
        }

        function downloadVariance(){
                
            const rw = document.querySelectorAll(`tr[data-location-id='${locationSelect.value}']`);
            const visibleRows = Array.from(rows).filter(row => !row.classList.contains('hidden'));

            let count =0;

            rw.forEach(row => {
               if(!row.querySelector('input[type="number"]').value){
                    count++;
               }
            });

            if(count==visibleRows.length){
                rw.forEach(row => {
                    const tds = document.querySelectorAll('td[id^="diff"], td[id^="cost"]');
                    
                    tds.forEach(td => {
                        td.classList.add('no-print');
                    });
                });

                document.getElementById('diff').classList.add('no-print');
                document.getElementById('cost').classList.add('no-print');


                window.print();
            }else{
                rw.forEach(row => {
                    const tds = document.querySelectorAll('td[id^="diff"], td[id^="cost"]');
                    
                    tds.forEach(td => {
                        td.classList.remove('no-print');
                    });
                });

                document.getElementById('diff').classList.remove('no-print');
                document.getElementById('cost').classList.remove('no-print');
               window.print();
            }
        }


        function downloadCSV() {
            
            const csvRows = [];
            const headers = Array.from(document.querySelectorAll('table th')).map(th => th.innerText);
            csvRows.push(headers.join(','));

            // Get data from visible rows
            const visibleRows = Array.from(rows).filter(row => !row.classList.contains('hidden'));
            visibleRows.forEach(row => {
                const cols = Array.from(row.querySelectorAll('td')).slice(0, 5).map(td => td.innerText); // Exclude input
                csvRows.push(cols.join(','));
            });

            // Create a CSV file and trigger download
            const csvString = csvRows.join('\n');
            const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('href', url);
            a.setAttribute('download', `items_list_${fileName}.csv`);
            a.style.visibility = 'hidden';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function clearCount(){
            const input = document.querySelectorAll('input[type="number"]');
            input.forEach(input => input.value = '');
            
            const tdElements = document.querySelectorAll('td[id^="diff"]');
            tdElements.forEach(td => td.textContent = '');

            const costElements = document.querySelectorAll('td[id^="cost"]');
            costElements.forEach(td => td.textContent = '');

            totalEstLost=0;
            totalMissingItems=0;
        }

        const csvFileInput = document.getElementById('csvFileInput');

        csvFileInput.addEventListener('change', function(event) {

            
            const file = event.target.files[0];
            const rw = document.querySelectorAll(`tr[data-location-id='${locationSelect.value}']`);
            document.getElementById('btnModal').click();

            document.getElementById('diff').classList.remove('hidden');
            document.getElementById('cost').classList.remove('hidden');

            document.getElementById('ufileName').innerText = file.name;
            document.getElementById('seledtedLocation').innerText = localStorage.getItem('location');
            const location = document.getElementById('location').value;
            var count=0;
            
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const text = e.target.result;
                    const lines = text.split('\n');
                    const data = lines.map(line => line.split(','));
                    
                    // Assume the first column contains Item IDs and the second column contains quantities

                    const quantities = {};
                    const onHand = {};
                    
                
                    data.forEach(row => {
                        if (row.length >= 2) {
                            const itemId = row[0].trim();
                            const quantity = row[4].trim();
                            const qty = row[3].trim();
                            quantities[itemId] = quantity; // Store quantity by Item ID
                            onHand[itemId] = qty;
                           
                            count++;
                        }
                    });

                  
                    // Update input boxes with quantities from CSV
                  
                    rw.forEach(row => {
                        
                        const itemId = row.cells[0].innerText; // Assuming Item ID is in the first cell
                        if (quantities[itemId] !== undefined) {
                            if(file.name.includes(localStorage.getItem('location')) && count-1 == document.getElementById('rowCount').innerText){
                                row.querySelector('input[type="number"]').value = quantities[itemId];
                               
                                document.getElementById(`diff-${itemId}-${location}`).innerText = quantities[itemId] - onHand[itemId];

                                totalMissingItems += (quantities[itemId] - onHand[itemId]);

                                let costEle = document.getElementById(`cost-${itemId}-${location}`);
                                
                                costEle.innerText = (costEle.dataset.cost * (quantities[itemId] - onHand[itemId])).toFixed(2);
                                
                                totalEstLost += (costEle.dataset.cost * (quantities[itemId] - onHand[itemId]));
                               
                                document.getElementById('warningText').style.color = 'green';
                                document.getElementById('warningText').innerText = 'Data imported successfully';
                                document.getElementById('csvFileInput').value= '';
                               
                                document.getElementById('reportData').innerText = ' ••••• Total Lost Items: ' + totalMissingItems * -1 + ' ••••• Total Estimated Loss: ' + totalEstLost.toFixed(2);
                                



                                if(quantities[itemId] - onHand[itemId] != 0){
                                    jsonData.push({
                                                "item_id": itemId,
                                                "stocklocation_id": locationSelect.value,
                                                "stockbin_id": quantities[itemId] - onHand[itemId],
                                                "quantity_in": quantities[itemId] - onHand[itemId],
                                                "real_quantity_in": quantities[itemId] - onHand[itemId],
                                                "note": "Inventory count update",
                                                "is_stock_take": true
                                            });
                                } 
                                               
                               
                                            

                                // document.getElementById('btnHalo').style.display = 'inline-block';
                            }else{
                                row.querySelector('input[type="number"]').value = '';
                                document.getElementById('warningText').style.color = 'red';
                                let err = '';
                                if(!file.name.includes(localStorage.getItem('location'))){err = ' & File name mismatch'}
                                document.getElementById('warningText').innerText = `Error: Number of record mismatch. Actual record:${document.getElementById('rowCount').innerText}  Uploaded record: ${count-1} ${err}`;
                                document.getElementById('csvFileInput').value= '';
                            }
                        }
                    });
                };
                reader.readAsText(file);
            }
        });

        document.getElementById('reportData').innerText='';

        function downloadHaloJson(){
            const dataStr = JSON.stringify(jsonData, null, 2);
            const blob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = 'data.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }


       

        const inputElements = document.querySelectorAll('input[type="number"]');

        // inputElements.forEach(input => {
        //     input.addEventListener('change', function(event) {

        //     document.getElementById('diff').classList.remove('hidden');
        //     document.getElementById('cost').classList.remove('hidden');

        //     var difference = document.getElementById((event.target.id).replace('input','diff'));
        //     var onHand = document.getElementById((event.target.id).replace('input','onhand')).innerText;
        //     var countValue = event.target.value;
        //     var cost = document.getElementById((event.target.id).replace('input','cost'));
            
        //     if(!difference.innerText){

        //         difference.innerText = countValue - onHand;
        //         cost.innerText = parseFloat(cost.dataset.cost * difference.innerText).toFixed(2);

        //         if((countValue - onHand)< 0){
                   
        //             totalMissingItems+= parseFloat(difference.innerText);
        //             totalEstLost += parseFloat(cost.dataset.cost) * parseFloat(difference.innerText);
        //             difference.classList.add('flash-red');
        //             cost.classList.add('flash-red');
        //             setTimeout(() => {
        //                 difference.classList.remove('flash-red');
        //                 cost.classList.remove('flash-red');
        //             }, 2000);

                  
        //             document.getElementById('reportData').innerText = 'Total Lost Items: ' + totalMissingItems * -1 + ' Total Estimated Loss: ' + parseFloat(totalEstLost).toFixed(2);
        //         }
        //         else{
                   
        //             totalMissingItems+= parseFloat(difference.innerText);
        //             totalEstLost +=  parseFloat(cost.dataset.cost) * parseFloat(difference.innerText);


        //             difference.classList.add('flash-green');
        //             cost.classList.add('flash-green');
        //             setTimeout(() => {
        //                 difference.classList.remove('flash-green');
        //                 cost.classList.remove('flash-green');
        //             }, 2000);


        //             document.getElementById('reportData').innerText = 'Total Lost Items: ' + totalMissingItems * -1 + ' Total Estimated Loss: ' +  parseFloat(totalEstLost).toFixed(2);
        //         }
            
        //     }else{
        //     }
        //     });
        // });

        updateRowCount();
    </script>
   
   <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
   <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
   <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js" integrity="sha384-+sLIOodYLS7CIrQpBjl+C7nPvqq+FbNUBDunl/OZv93DB7Ln/533i8e/mZXLi/P+" crossorigin="anonymous"></script>
</body>
</html>

